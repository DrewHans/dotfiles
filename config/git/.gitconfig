[user]
    name = DrewHans
    email = programmer.drew.hans@gmail.com

[color]
    ui = true

[core]
    # editor called when writing commit messages
    editor = vim

    # autocrlf controls file line endings
    autocrlf = input
    # autocrlf = input => for Linux/OSX
    # autocrlf = true => for Windows

[filter "lfs"]
    required = true
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process

[alias]
    aa = add -A
    br = branch
    ci = commit
    co = checkout
    last = log -1 HEAD
    st = status

    ############################################################################
    # This alias pulls changes from the remote, rebases any local commits to come after the commits
    # pulled down, then removes remote-tracking branches that no longer exist on the remote

    up = !git pull --rebase --prune $@ && \
          git submodule update --init --recursive


    ############################################################################
    # These aliases allow you to create & undo a temporary commit savepoint

    savepoint = !git add -A && git commit -m 'SAVEPOINT'
    unsavepoint = reset HEAD~1 --mixed

    ############################################################################
    # These aliases allow you to search for / switch to a branch

    which = !git branch | grep -i
    # example: git which branchname

    lucky = !bash -c 'git checkout $(git which $1 -m1)' -
    # example: git lucky branchname

    ############################################################################
    # This alias starts up a local git daemon server

    serve = daemon \
            --reuseaddr \
            --verbose \
            --base-path=. \
            --export-all ./.git

    ############################################################################
    # open the git repo location in your web browser

    open = "!f() { REPO_URL=$(git config remote.origin.url); explorer ${REPO_URL%%.git}; }; f"
    browse = !git open

    ############################################################################
    # These aliases show pretty logs (source: Git Aliases Of The Gods)

    lg1-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)'
    lg2-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(auto)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
    lg3-specific = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset) %C(bold cyan)(committed: %cD)%C(reset) %C(auto)%d%C(reset)%n''          %C(white)%s%C(reset)%n''          %C(dim white)- %an <%ae> %C(reset) %C(dim white)(committer: %cn <%ce>)%C(reset)'
    lg1 = !"git lg1-specific --all"
    lg2 = !"git lg2-specific --all"
    lg3 = !"git lg3-specific --all"
    lg = !"git lg1"

    ############################################################################
    # These are old aliases I used when I was new to git (easy to remember)

    unadd = reset HEAD~1
    # example: git unadd dirname/filename.sh

    uncommit = reset --soft HEAD~1
    # example: git uncommit

    branches = branch -a
    # example: git branches

    tags = tag -n1 --list
    # example: git tags

    stashes = stash list
    # example: git stashes

    pushb = push --set-upstream origin
    # example: git pushb feature/mybranchname

    ############################################################################
